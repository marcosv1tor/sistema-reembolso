# Script PowerShell para configurar e executar o ambiente completo
# Este script configura e inicia todos os servi√ßos do sistema de reembolso

param(
    [switch]$SkipBuild,
    [switch]$SkipMigrations,
    [switch]$Development,
    [switch]$Production,
    [switch]$StopServices,
    [switch]$CleanUp
)

# Configura√ß√µes
$ErrorActionPreference = "Stop"
$rootPath = Split-Path -Parent $PSScriptRoot

# Fun√ß√£o para exibir banner
function Show-Banner {
    Write-Host "" -ForegroundColor Green
    Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Green
    Write-Host "‚ïë                    SISTEMA DE REEMBOLSO                     ‚ïë" -ForegroundColor Green
    Write-Host "‚ïë                   Setup Environment                         ‚ïë" -ForegroundColor Green
    Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Green
    Write-Host "" -ForegroundColor Green
}

# Fun√ß√£o para log com timestamp
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $color = switch ($Level) {
        "ERROR" { "Red" }
        "WARN" { "Yellow" }
        "SUCCESS" { "Green" }
        "INFO" { "Cyan" }
        default { "White" }
    }
    Write-Host "[$timestamp] [$Level] $Message" -ForegroundColor $color
}

# Fun√ß√£o para verificar pr√©-requisitos
function Test-Prerequisites {
    Write-Log "Verificando pr√©-requisitos..." "INFO"
    
    # Verificar Docker
    try {
        $dockerVersion = docker --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Log "‚úì Docker encontrado: $dockerVersion" "SUCCESS"
        } else {
            throw "Docker n√£o encontrado"
        }
    }
    catch {
        Write-Log "‚úó Docker n√£o est√° instalado ou n√£o est√° no PATH" "ERROR"
        return $false
    }
    
    # Verificar Docker Compose
    try {
        $composeVersion = docker-compose --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Log "‚úì Docker Compose encontrado: $composeVersion" "SUCCESS"
        } else {
            throw "Docker Compose n√£o encontrado"
        }
    }
    catch {
        Write-Log "‚úó Docker Compose n√£o est√° instalado" "ERROR"
        return $false
    }
    
    # Verificar .NET SDK
    try {
        $dotnetVersion = dotnet --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Log "‚úì .NET SDK encontrado: $dotnetVersion" "SUCCESS"
        } else {
            throw ".NET SDK n√£o encontrado"
        }
    }
    catch {
        Write-Log "‚úó .NET SDK n√£o est√° instalado" "ERROR"
        return $false
    }
    
    return $true
}

# Fun√ß√£o para parar servi√ßos
function Stop-Services {
    Write-Log "Parando todos os servi√ßos..." "INFO"
    
    Set-Location $rootPath
    
    try {
        docker-compose down --remove-orphans
        Write-Log "‚úì Servi√ßos parados com sucesso" "SUCCESS"
    }
    catch {
        Write-Log "‚úó Erro ao parar servi√ßos: $($_.Exception.Message)" "ERROR"
    }
}

# Fun√ß√£o para limpeza
function Invoke-CleanUp {
    Write-Log "Executando limpeza completa..." "INFO"
    
    Set-Location $rootPath
    
    try {
        # Parar e remover containers
        docker-compose down --remove-orphans --volumes
        
        # Remover imagens do projeto
        $images = docker images --filter "reference=*reembolso*" -q
        if ($images) {
            docker rmi $images -f
        }
        
        # Limpar volumes √≥rf√£os
        docker volume prune -f
        
        # Limpar redes √≥rf√£s
        docker network prune -f
        
        Write-Log "‚úì Limpeza conclu√≠da com sucesso" "SUCCESS"
    }
    catch {
        Write-Log "‚úó Erro durante limpeza: $($_.Exception.Message)" "ERROR"
    }
}

# Fun√ß√£o para compilar projetos
function Build-Projects {
    Write-Log "Compilando projetos..." "INFO"
    
    Set-Location $rootPath
    
    try {
        # Restaurar depend√™ncias
        Write-Log "Restaurando depend√™ncias..." "INFO"
        dotnet restore
        
        if ($LASTEXITCODE -ne 0) {
            throw "Erro ao restaurar depend√™ncias"
        }
        
        # Compilar solu√ß√£o
        Write-Log "Compilando solu√ß√£o..." "INFO"
        dotnet build --configuration Release --no-restore
        
        if ($LASTEXITCODE -ne 0) {
            throw "Erro ao compilar projetos"
        }
        
        Write-Log "‚úì Projetos compilados com sucesso" "SUCCESS"
        return $true
    }
    catch {
        Write-Log "‚úó Erro ao compilar projetos: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

# Fun√ß√£o para executar migra√ß√µes
function Run-Migrations {
    Write-Log "Executando migra√ß√µes do banco de dados..." "INFO"
    
    $migrationScript = Join-Path $PSScriptRoot "run-migrations.ps1"
    
    if (Test-Path $migrationScript) {
        try {
            & $migrationScript
            if ($LASTEXITCODE -eq 0) {
                Write-Log "‚úì Migra√ß√µes executadas com sucesso" "SUCCESS"
                return $true
            } else {
                throw "Script de migra√ß√£o retornou c√≥digo de erro $LASTEXITCODE"
            }
        }
        catch {
            Write-Log "‚úó Erro ao executar migra√ß√µes: $($_.Exception.Message)" "ERROR"
            return $false
        }
    } else {
        Write-Log "‚ö† Script de migra√ß√£o n√£o encontrado" "WARN"
        return $false
    }
}

# Fun√ß√£o para iniciar servi√ßos
function Start-Services {
    param([string]$Environment = "development")
    
    Write-Log "Iniciando servi√ßos em modo $Environment..." "INFO"
    
    Set-Location $rootPath
    
    try {
        # Definir arquivo de compose baseado no ambiente
        $composeFile = "docker-compose.yml"
        if ($Environment -eq "production") {
            $composeFile = "docker-compose.prod.yml"
        }
        
        # Verificar se o arquivo existe
        if (-not (Test-Path $composeFile)) {
            Write-Log "‚ö† Arquivo $composeFile n√£o encontrado, usando docker-compose.yml" "WARN"
            $composeFile = "docker-compose.yml"
        }
        
        # Iniciar servi√ßos de infraestrutura primeiro
        Write-Log "Iniciando servi√ßos de infraestrutura..." "INFO"
        docker-compose -f $composeFile up -d sqlserver redis elasticsearch
        
        # Aguardar servi√ßos ficarem prontos
        Write-Log "Aguardando servi√ßos de infraestrutura ficarem prontos..." "INFO"
        Start-Sleep -Seconds 30
        
        # Iniciar APIs
        Write-Log "Iniciando APIs..." "INFO"
        docker-compose -f $composeFile up -d usuarios-api funcionarios-api solicitacoes-api relatorios-api
        
        # Aguardar APIs ficarem prontas
        Write-Log "Aguardando APIs ficarem prontas..." "INFO"
        Start-Sleep -Seconds 20
        
        # Iniciar API Gateway
        Write-Log "Iniciando API Gateway..." "INFO"
        docker-compose -f $composeFile up -d api-gateway
        
        # Iniciar servi√ßos de monitoramento (opcional)
        if ($Environment -eq "production") {
            Write-Log "Iniciando servi√ßos de monitoramento..." "INFO"
            docker-compose -f $composeFile up -d prometheus grafana kibana
        }
        
        Write-Log "‚úì Servi√ßos iniciados com sucesso" "SUCCESS"
        return $true
    }
    catch {
        Write-Log "‚úó Erro ao iniciar servi√ßos: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

# Fun√ß√£o para verificar sa√∫de dos servi√ßos
function Test-ServicesHealth {
    Write-Log "Verificando sa√∫de dos servi√ßos..." "INFO"
    
    $services = @(
        @{ Name = "API Gateway"; Url = "http://localhost/health" },
        @{ Name = "Usuarios API"; Url = "http://localhost/api/usuarios/health" },
        @{ Name = "Funcionarios API"; Url = "http://localhost/api/funcionarios/health" },
        @{ Name = "Solicitacoes API"; Url = "http://localhost/api/solicitacoes/health" },
        @{ Name = "Relatorios API"; Url = "http://localhost/api/relatorios/health" }
    )
    
    $allHealthy = $true
    
    foreach ($service in $services) {
        try {
            $response = Invoke-WebRequest -Uri $service.Url -TimeoutSec 10 -UseBasicParsing
            if ($response.StatusCode -eq 200) {
                Write-Log "‚úì $($service.Name) est√° saud√°vel" "SUCCESS"
            } else {
                Write-Log "‚ö† $($service.Name) retornou status $($response.StatusCode)" "WARN"
                $allHealthy = $false
            }
        }
        catch {
            Write-Log "‚úó $($service.Name) n√£o est√° respondendo" "ERROR"
            $allHealthy = $false
        }
    }
    
    return $allHealthy
}

# Fun√ß√£o para exibir informa√ß√µes dos servi√ßos
function Show-ServicesInfo {
    Write-Log "Informa√ß√µes dos servi√ßos:" "INFO"
    Write-Host ""
    Write-Host "üåê API Gateway: http://localhost" -ForegroundColor Green
    Write-Host "üë• Usuarios API: http://localhost/api/usuarios" -ForegroundColor Green
    Write-Host "üë®‚Äçüíº Funcionarios API: http://localhost/api/funcionarios" -ForegroundColor Green
    Write-Host "üí∞ Solicitacoes API: http://localhost/api/solicitacoes" -ForegroundColor Green
    Write-Host "üìä Relatorios API: http://localhost/api/relatorios" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìö Documenta√ß√£o Swagger:" -ForegroundColor Cyan
    Write-Host "   - Usuarios: http://localhost/swagger/usuarios" -ForegroundColor Cyan
    Write-Host "   - Funcionarios: http://localhost/swagger/funcionarios" -ForegroundColor Cyan
    Write-Host "   - Solicitacoes: http://localhost/swagger/solicitacoes" -ForegroundColor Cyan
    Write-Host "   - Relatorios: http://localhost/swagger/relatorios" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üîç Monitoramento:" -ForegroundColor Yellow
    Write-Host "   - Kibana: http://localhost:5601" -ForegroundColor Yellow
    Write-Host "   - Grafana: http://localhost:3000 (admin/admin)" -ForegroundColor Yellow
    Write-Host "   - Prometheus: http://localhost:9090" -ForegroundColor Yellow
    Write-Host ""
}

# Fun√ß√£o principal
function Main {
    Show-Banner
    
    # Processar par√¢metros
    if ($StopServices) {
        Stop-Services
        return
    }
    
    if ($CleanUp) {
        Invoke-CleanUp
        return
    }
    
    # Verificar pr√©-requisitos
    if (-not (Test-Prerequisites)) {
        Write-Log "Pr√©-requisitos n√£o atendidos. Abortando." "ERROR"
        exit 1
    }
    
    # Determinar ambiente
    $environment = "development"
    if ($Production) {
        $environment = "production"
    }
    
    Write-Log "Configurando ambiente: $environment" "INFO"
    
    # Compilar projetos
    if (-not $SkipBuild) {
        if (-not (Build-Projects)) {
            Write-Log "Falha na compila√ß√£o. Abortando." "ERROR"
            exit 1
        }
    } else {
        Write-Log "Pulando compila√ß√£o (--SkipBuild especificado)" "WARN"
    }
    
    # Iniciar servi√ßos
    if (-not (Start-Services -Environment $environment)) {
        Write-Log "Falha ao iniciar servi√ßos. Abortando." "ERROR"
        exit 1
    }
    
    # Executar migra√ß√µes
    if (-not $SkipMigrations) {
        Write-Log "Aguardando banco de dados ficar pronto..." "INFO"
        Start-Sleep -Seconds 15
        
        if (-not (Run-Migrations)) {
            Write-Log "Falha nas migra√ß√µes. Continuando mesmo assim..." "WARN"
        }
    } else {
        Write-Log "Pulando migra√ß√µes (--SkipMigrations especificado)" "WARN"
    }
    
    # Verificar sa√∫de dos servi√ßos
    Write-Log "Aguardando servi√ßos ficarem prontos..." "INFO"
    Start-Sleep -Seconds 30
    
    $maxRetries = 5
    $retryCount = 0
    $servicesHealthy = $false
    
    while ($retryCount -lt $maxRetries -and -not $servicesHealthy) {
        $retryCount++
        Write-Log "Tentativa $retryCount de $maxRetries para verificar sa√∫de dos servi√ßos..." "INFO"
        
        $servicesHealthy = Test-ServicesHealth
        
        if (-not $servicesHealthy -and $retryCount -lt $maxRetries) {
            Write-Log "Aguardando 30 segundos antes da pr√≥xima tentativa..." "INFO"
            Start-Sleep -Seconds 30
        }
    }
    
    if ($servicesHealthy) {
        Write-Log "‚úì Todos os servi√ßos est√£o funcionando corretamente!" "SUCCESS"
        Show-ServicesInfo
    } else {
        Write-Log "‚ö† Alguns servi√ßos podem n√£o estar funcionando corretamente" "WARN"
        Write-Log "Verifique os logs com: docker-compose logs <service-name>" "INFO"
        Show-ServicesInfo
    }
    
    Write-Log "Setup conclu√≠do!" "SUCCESS"
}

# Executar fun√ß√£o principal
Main

# Instru√ß√µes finais
Write-Host ""
Write-Host "=== Comandos √öteis ===" -ForegroundColor Magenta
Write-Host "Para parar os servi√ßos: .\scripts\setup-environment.ps1 -StopServices" -ForegroundColor White
Write-Host "Para limpeza completa: .\scripts\setup-environment.ps1 -CleanUp" -ForegroundColor White
Write-Host "Para ver logs: docker-compose logs -f <service-name>" -ForegroundColor White
Write-Host "Para ver status: docker-compose ps" -ForegroundColor White
Write-Host ""